Что делать:
1) Библа предсказывающего анализатора должна принимать в параметрах:
- лексический анализатор, который будет как раз доставать по токену с помощью nextToken()
- таблицу, с которой нужно работать данному анализатору

2) Генератор
Принимает на вход:
- название файла, где лежит грамматика (любая, но, главное, в том же формате, как и в индивидуальном варике) 
- название файла, куда поместить сгенерированную таблицу
- (необязательно, можно и хардкодом, так как таблица для языка грамматик меняться не будет) название файла, где лежит табла для библы предск. анализатора (2 параметр для предск. анализатора)

Возвращает:
- Кладет таблу в соотв. файл, переданный на входе

в предск. анализатора нужно передавать:
- лексический анализатор с токенами для языка грамматик 
- место, где лежит таблица, построенная для языка грамматик

3) Калькулятор
Принимает на вход:
- файл, где лежит арифм. выражение
- (необязательно, можно и хардкодом, так как таблица для арифм. выражений генерится один раз генератором) название файла, где лежит табла для библы предск. анализатора (2 параметр для предск. анализатора)

Возвращает:
- Значение выражения

в предск. анализатор нужно передавать:
- лексический анализатор с токенами для арифм. выражений
- место, где лежит таблица, сгенерированная генератором при передаче в него грамматики из индивидуального варианта












Rules -> Rule Rules | EPSILON
Rule -> Axiom NTerm NTermRule
Axiom -> * | EPSILON
NTerm -> ID
NTermRule -> ( ArgOR ) NTermRuleTail
NTermRuleTail -> ( ArgOR ) NTermRuleTail | EPSILON
ArgOR -> SymArgOR ArgOR | EPSILON
SymArgOR -> STR | NTerm



E -> T E'
E' -> + T E' | EPSILON
T -> F T'
T' -> * F T' | EPSILON
F -> n | ( E )

=========================================


/* Грамматика входного языка на самом входном языке: */
* Rules (Rule Rules) ()
Rule (Axiom NTerm NTermRule)
Axiom ("*") ()
NTerm ("i")
NTermRule ("(" ArgOR ")" NTermRuleTail)
NTermRuleTail ("(" ArgOR ")" NTermRuleTail) ()
ArgOR (SymArgOR ArgOR) ()
SymArgOR ("s") (NTerm)



/* аксиома помечена звёздочкой */
  F  ("n") ("(" E ")")
  T  (F T')
  T' ("*" F T') ()
* E  (T E')
  E' ("+" T E') ()



http://hackingoff.com/compilers/predict-first-follow-set







append(xs : [(int, int)], 
       ys : [(int,
              int)]) : [(int, int)] =
  if null(xs) then
    ys
  else
    cons(car(xs), append(cdr(xs),
                         -- параметр не меняется
                         ys);













